
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationsScalarFieldEnum = {
  created_at: 'created_at',
  name: 'name',
  description: 'description',
  logo: 'logo',
  id: 'id',
  phone: 'phone',
  config: 'config',
  tenant_id: 'tenant_id'
};

exports.Prisma.ConfigurationsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  org_id: 'org_id',
  config_key: 'config_key',
  config_value: 'config_value',
  is_deleted: 'is_deleted'
};

exports.Prisma.IntegrationsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  org_id: 'org_id',
  integration_type: 'integration_type',
  config: 'config',
  vault: 'vault',
  key: 'key'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  team_id: 'team_id'
};

exports.Prisma.TeamsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  name: 'name',
  logo: 'logo',
  description: 'description',
  org_id: 'org_id',
  created_by: 'created_by'
};

exports.Prisma.UsersScalarFieldEnum = {
  created_at: 'created_at',
  name: 'name',
  email: 'email',
  password: 'password',
  profile_pic: 'profile_pic',
  id: 'id',
  calendar: 'calendar',
  org_id: 'org_id',
  role: 'role'
};

exports.Prisma.Phone_numberScalarFieldEnum = {
  id: 'id',
  org_id: 'org_id',
  number: 'number',
  app_type: 'app_type',
  app_id: 'app_id'
};

exports.Prisma.Agent_assistScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  agent_assist_id: 'agent_assist_id',
  message: 'message',
  employee_id: 'employee_id',
  title: 'title',
  org_id: 'org_id',
  message_id: 'message_id'
};

exports.Prisma.Voice_virtual_agent_call_statusScalarFieldEnum = {
  created_at: 'created_at',
  call_id: 'call_id',
  content_type: 'content_type',
  role: 'role',
  content: 'content',
  id: 'id'
};

exports.Prisma.Voice_virtual_agent_callsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  caller: 'caller',
  ended_reason: 'ended_reason',
  details_url: 'details_url',
  ticket_id: 'ticket_id',
  ended_at: 'ended_at',
  recordingUrl: 'recordingUrl',
  status: 'status',
  user_name: 'user_name',
  user_sys_id: 'user_sys_id',
  called_at: 'called_at',
  voice_virtual_agent_id: 'voice_virtual_agent_id',
  incident_ticket_ids: 'incident_ticket_ids',
  interaction_id: 'interaction_id',
  sentiment: 'sentiment',
  summary: 'summary'
};

exports.Prisma.Voice_virtual_agentsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  org_id: 'org_id',
  phone_number: 'phone_number',
  config: 'config',
  name: 'name',
  kb_id: 'kb_id',
  agent_type: 'agent_type',
  agent_id: 'agent_id',
  agent_prompt: 'agent_prompt'
};

exports.Prisma.IntakeScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  meeting_id: 'meeting_id',
  team_id: 'team_id',
  created_by: 'created_by'
};

exports.Prisma.Postcall_analysisScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  meeting_id: 'meeting_id',
  transcript: 'transcript',
  submission_doc: 'submission_doc',
  breakdown: 'breakdown',
  sentiment: 'sentiment',
  entity: 'entity',
  status: 'status',
  summary: 'summary',
  type: 'type'
};

exports.Prisma.ChatsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  meeting_id: 'meeting_id',
  message: 'message',
  role: 'role',
  message_id: 'message_id'
};

exports.Prisma.MeetingsScalarFieldEnum = {
  title: 'title',
  channel: 'channel',
  link: 'link',
  phone_number: 'phone_number',
  postcall_transcript: 'postcall_transcript',
  call_recording_url: 'call_recording_url',
  analysis_status: 'analysis_status',
  bot_name: 'bot_name',
  listener_id: 'listener_id',
  app_id: 'app_id',
  start_timestamp: 'start_timestamp',
  end_timestamp: 'end_timestamp',
  postcall_analysis_webhook: 'postcall_analysis_webhook',
  meeting_id: 'meeting_id',
  is_deleted: 'is_deleted',
  meeting_bot_type: 'meeting_bot_type'
};

exports.Prisma.Realtime_transcriptsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  content: 'content',
  content_type: 'content_type',
  meeting_id: 'meeting_id'
};

exports.Prisma.SuggestionsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  suggestion: 'suggestion',
  meeting_id: 'meeting_id'
};

exports.Prisma.Kb_collectionsScalarFieldEnum = {
  name: 'name',
  org_id: 'org_id',
  id: 'id',
  last_synced_at: 'last_synced_at',
  source: 'source',
  source_config: 'source_config'
};

exports.Prisma.Kb_collection_documentsScalarFieldEnum = {
  id: 'id',
  kb_collection_id: 'kb_collection_id',
  document_block_storage_url: 'document_block_storage_url',
  is_indexed: 'is_indexed',
  is_deleted: 'is_deleted',
  name: 'name'
};

exports.Prisma.User_profilesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  profile_type: 'profile_type',
  profile_username: 'profile_username'
};

exports.Prisma.P1_meetingsScalarFieldEnum = {
  created_at: 'created_at',
  team_id: 'team_id',
  created_by: 'created_by',
  incident_name: 'incident_name',
  meeting_id: 'meeting_id',
  organizations_id: 'organizations_id',
  id: 'id'
};

exports.Prisma.Noc_rulesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  description: 'description',
  config: 'config'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  reaction: 'reaction',
  message: 'message'
};

exports.Prisma.Binary_reactionScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  session_id: 'session_id',
  reaction: 'reaction',
  message: 'message',
  app_id: 'app_id',
  message_id: 'message_id'
};

exports.Prisma.Noc_agent_assistScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  noc_agent_assist_id: 'noc_agent_assist_id',
  employee_id: 'employee_id',
  title: 'title',
  message: 'message'
};

exports.Prisma.Ai_logsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  org_id: 'org_id',
  session_id: 'session_id',
  app_id: 'app_id',
  request_body: 'request_body',
  response_body: 'response_body',
  user_id: 'user_id'
};

exports.Prisma.Dashboard_dataScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  created_by: 'created_by',
  num_jobs: 'num_jobs',
  num_applications: 'num_applications',
  num_intake: 'num_intake',
  num_interviews: 'num_interviews'
};

exports.Prisma.IssuesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  session_id: 'session_id',
  feedback: 'feedback'
};

exports.Prisma.LoginsScalarFieldEnum = {
  id: 'id',
  login_time: 'login_time',
  user_id: 'user_id',
  application_url: 'application_url'
};

exports.Prisma.NudgingScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  sys_id: 'sys_id',
  task_type: 'task_type',
  source_table: 'source_table',
  approver: 'approver',
  count: 'count',
  snooze_until: 'snooze_until'
};

exports.Prisma.Knowledge_transition_meetingsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  meeting_id: 'meeting_id',
  team_id: 'team_id',
  created_by: 'created_by'
};

exports.Prisma.Knowledgebase_collectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  org_id: 'org_id',
  source: 'source',
  source_config: 'source_config',
  created_at: 'created_at',
  last_synced_at: 'last_synced_at'
};

exports.Prisma.Knowledgebase_document_assistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  knowledgebase_collection_id: 'knowledgebase_collection_id',
  access_url: 'access_url',
  status: 'status',
  is_indexed: 'is_indexed',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  summary: 'summary',
  edited_document: 'edited_document',
  category: 'category',
  tags: 'tags',
  sentiment: 'sentiment',
  suggestions: 'suggestions',
  score: 'score',
  queries: 'queries',
  org_id: 'org_id',
  cluster: 'cluster',
  language: 'language',
  content: 'content',
  is_chunked_indexed: 'is_chunked_indexed'
};

exports.Prisma.Knowledgebase_document_assist_versionsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  document_id: 'document_id',
  updated_by: 'updated_by',
  created_at: 'created_at'
};

exports.Prisma.Knowledgebase_similarityScalarFieldEnum = {
  from_document_id: 'from_document_id',
  to_document_id: 'to_document_id',
  similarity_score: 'similarity_score',
  redundancy_score: 'redundancy_score',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Knowledgebase_translationScalarFieldEnum = {
  from_document_id: 'from_document_id',
  to_document_id: 'to_document_id',
  from_document_language: 'from_document_language',
  to_document_language: 'to_document_language',
  similarity_score: 'similarity_score',
  redundancy_score: 'redundancy_score',
  created_at: 'created_at',
  updated_at: 'updated_at',
  org_id: 'org_id'
};

exports.Prisma.RecommendationsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  recommendation: 'recommendation',
  type: 'type',
  rank: 'rank',
  feedback: 'feedback',
  resolved: 'resolved',
  metadata: 'metadata',
  org_id: 'org_id',
  resolved_at: 'resolved_at'
};

exports.Prisma.IncidentsScalarFieldEnum = {
  id: 'id',
  incident_number: 'incident_number',
  urgency: 'urgency',
  impact: 'impact',
  priority: 'priority',
  assignment_group: 'assignment_group',
  short_description: 'short_description',
  long_description: 'long_description',
  category: 'category',
  subcategory: 'subcategory',
  configuration_item: 'configuration_item',
  ci_location: 'ci_location',
  opened_at: 'opened_at',
  resolved_at: 'resolved_at',
  created_at: 'created_at',
  incident_class: 'incident_class',
  status: 'status',
  org_id: 'org_id',
  cluster: 'cluster',
  close_notes: 'close_notes',
  comments: 'comments',
  work_notes: 'work_notes',
  solution: 'solution',
  article_used_to_resolve: 'article_used_to_resolve'
};

exports.Prisma.ModulesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  org_id: 'org_id',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  source: 'source'
};

exports.Prisma.Modules_knowledgebase_documentsScalarFieldEnum = {
  module_id: 'module_id',
  document_id: 'document_id'
};

exports.Prisma.QuizesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  id: 'id',
  quiz_id: 'quiz_id',
  quize_id: 'quize_id',
  question: 'question',
  options: 'options',
  answer: 'answer',
  correct_attempts: 'correct_attempts',
  total_attempts: 'total_attempts'
};

exports.Prisma.Users_quizesScalarFieldEnum = {
  user_id: 'user_id',
  quize_id: 'quize_id',
  questions_answered: 'questions_answered',
  correctly_answered: 'correctly_answered',
  score: 'score',
  completed: 'completed'
};

exports.Prisma.SimulationsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  module_id: 'module_id',
  simulation_type: 'simulation_type',
  status: 'status',
  processed: 'processed',
  ai_feedback: 'ai_feedback',
  score: 'score'
};

exports.Prisma.Chat_simulationsScalarFieldEnum = {
  id: 'id',
  simulation_id: 'simulation_id',
  created_at: 'created_at',
  message: 'message',
  chatter: 'chatter'
};

exports.Prisma.Voice_simulationsScalarFieldEnum = {
  id: 'id',
  simulation_id: 'simulation_id',
  created_at: 'created_at',
  content: 'content',
  content_type: 'content_type',
  speaker: 'speaker'
};

exports.Prisma.Cva_dashboardScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  interaction_id: 'interaction_id',
  session_id: 'session_id',
  org_id: 'org_id',
  user_id: 'user_id',
  azure_object_id: 'azure_object_id',
  user_name: 'user_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  answered_queries: 'answered_queries',
  unanswered_queries: 'unanswered_queries',
  non_answerable_queries: 'non_answerable_queries',
  issue_categories: 'issue_categories',
  issue_types: 'issue_types',
  answered_count: 'answered_count',
  unanswered_count: 'unanswered_count',
  non_answerable_count: 'non_answerable_count',
  total_issues_count: 'total_issues_count',
  total_time_spent: 'total_time_spent',
  tickets_created: 'tickets_created',
  ticket_ids: 'ticket_ids',
  issue_count: 'issue_count',
  total_query_count: 'total_query_count'
};

exports.Prisma.Cva_conversationsScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  messages: 'messages',
  language: 'language',
  file_attachments: 'file_attachments',
  channel_id: 'channel_id',
  from_id: 'from_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  conversation_id: 'conversation_id',
  interaction_id: 'interaction_id',
  status: 'status',
  tasks: 'tasks',
  org_id: 'org_id',
  unpruned_messages: 'unpruned_messages'
};

exports.Prisma.Cva_turn_contextScalarFieldEnum = {
  id: 'id',
  azure_object_id: 'azure_object_id',
  conversation_reference: 'conversation_reference',
  created_at: 'created_at',
  updated_at: 'updated_at',
  conversation_id: 'conversation_id'
};

exports.Prisma.Postcall_topics_for_meetingScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  meeting_id: 'meeting_id',
  topic: 'topic',
  queries_regarding_topic: 'queries_regarding_topic',
  speakers: 'speakers',
  keywords: 'keywords',
  resources_for_the_topic: 'resources_for_the_topic',
  content: 'content',
  kb_entry: 'kb_entry',
  is_deleted: 'is_deleted',
  approved_at: 'approved_at',
  approved_by: 'approved_by',
  is_approved: 'is_approved',
  knowledgebase_collection_id: 'knowledgebase_collection_id'
};

exports.Prisma.Postcall_kb_entry_versionScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  kb_entry: 'kb_entry',
  created_by: 'created_by',
  postcall_topic_id: 'postcall_topic_id'
};

exports.Prisma.Ticket_upload_historyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  size: 'size',
  date: 'date',
  url: 'url',
  org_id: 'org_id'
};

exports.Prisma.Train_assist_ingestScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  document_id: 'document_id',
  status: 'status'
};

exports.Prisma.Train_assist_topicsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  category: 'category',
  sub_category: 'sub_category',
  title: 'title',
  summary: 'summary',
  level: 'level',
  details: 'details',
  documents: 'documents',
  collection_id: 'collection_id',
  org_id: 'org_id',
  updated_at: 'updated_at'
};

exports.Prisma.Train_assist_activityScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  topic_id: 'topic_id',
  type: 'type',
  metadata: 'metadata',
  module_id: 'module_id',
  quiz_id: 'quiz_id',
  quiz_score: 'quiz_score'
};

exports.Prisma.Train_assist_topic_quizScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  questions: 'questions',
  topic_id: 'topic_id',
  user_id: 'user_id'
};

exports.Prisma.Ad_appliance_eventsScalarFieldEnum = {
  id: 'id',
  event_type: 'event_type',
  username: 'username',
  email: 'email',
  event_time: 'event_time',
  created_at: 'created_at',
  org_id: 'org_id',
  ldap_server: 'ldap_server'
};

exports.Prisma.Ad_appliance_tasksScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  task_type: 'task_type',
  status: 'status',
  retry_count: 'retry_count',
  response: 'response',
  created_at: 'created_at',
  updated_at: 'updated_at',
  org_id: 'org_id',
  ldap_server: 'ldap_server'
};

exports.Prisma.Chat_virtual_agentsScalarFieldEnum = {
  id: 'id',
  org_id: 'org_id',
  config: 'config',
  enabled: 'enabled',
  created_at: 'created_at',
  updated_at: 'updated_at',
  config_secret_key: 'config_secret_key'
};

exports.Prisma.Cva_user_preferencesScalarFieldEnum = {
  id: 'id',
  azure_object_id: 'azure_object_id',
  preferences: 'preferences',
  created_at: 'created_at',
  updated_at: 'updated_at',
  cva_id: 'cva_id'
};

exports.Prisma.Servicenow_recordsScalarFieldEnum = {
  sys_id: 'sys_id',
  table_name: 'table_name',
  data: 'data',
  updated_at: 'updated_at'
};

exports.Prisma.InteractionScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  session_id: 'session_id',
  user_aad_id: 'user_aad_id',
  org_id: 'org_id',
  timestamp_query: 'timestamp_query',
  timestamp_response: 'timestamp_response',
  user_query_text: 'user_query_text',
  bot_response_content: 'bot_response_content',
  response_type: 'response_type',
  card_type: 'card_type',
  intent_topic: 'intent_topic',
  skill_tag: 'skill_tag',
  service_action: 'service_action',
  citations_provided: 'citations_provided',
  ticket_system_ref: 'ticket_system_ref',
  interaction_outcome: 'interaction_outcome',
  error_occurred: 'error_occurred',
  error_message: 'error_message',
  error_type: 'error_type',
  error_component: 'error_component',
  ai_evaluated: 'ai_evaluated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFeedbackScalarFieldEnum = {
  id: 'id',
  interactionId: 'interactionId',
  user_aad_id: 'user_aad_id',
  timestamp_feedback: 'timestamp_feedback',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIFeedbackScalarFieldEnum = {
  id: 'id',
  interactionId: 'interactionId',
  ai_evaluator_model: 'ai_evaluator_model',
  ai_evaluation_timestamp: 'ai_evaluation_timestamp',
  ai_score_relevance: 'ai_score_relevance',
  ai_score_helpfulness: 'ai_score_helpfulness',
  ai_score_groundedness: 'ai_score_groundedness',
  ai_score_safety: 'ai_score_safety',
  ai_critique_summary: 'ai_critique_summary',
  ai_flags: 'ai_flags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SimulationThemeScalarFieldEnum = {
  id: 'id',
  train_assist_topic_id: 'train_assist_topic_id',
  learning_topic_title: 'learning_topic_title',
  title: 'title',
  customer_problem_statement: 'customer_problem_statement',
  keywords: 'keywords',
  difficulty: 'difficulty',
  time_limit_seconds: 'time_limit_seconds',
  expected_resolution_steps_summary: 'expected_resolution_steps_summary',
  is_active: 'is_active',
  org_id: 'org_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  collection_id: 'collection_id'
};

exports.Prisma.SimulationActivityScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  theme_id: 'theme_id',
  simulation_session_id: 'simulation_session_id',
  status: 'status',
  score: 'score',
  time_taken_seconds: 'time_taken_seconds',
  conversation_log: 'conversation_log',
  evaluation_feedback: 'evaluation_feedback',
  evaluation_details_json: 'evaluation_details_json',
  org_id: 'org_id',
  started_at: 'started_at',
  completed_at: 'completed_at'
};

exports.Prisma.Meeting_joinerScalarFieldEnum = {
  id: 'id',
  meeting_url: 'meeting_url',
  status: 'status',
  video_link: 'video_link',
  transcript: 'transcript',
  participants: 'participants',
  org_id: 'org_id',
  meeting_id: 'meeting_id',
  bot_join_time: 'bot_join_time',
  bot_leave_time: 'bot_leave_time',
  created_at: 'created_at',
  updated_at: 'updated_at',
  bot_name: 'bot_name',
  process_id: 'process_id'
};

exports.Prisma.TagsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  org_id: 'org_id',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Knowledgebase_collection_tagsScalarFieldEnum = {
  collection_id: 'collection_id',
  tag_id: 'tag_id',
  org_id: 'org_id',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.role = exports.$Enums.role = {
  Admin: 'Admin',
  User: 'User',
  Agent: 'Agent',
  Trainer: 'Trainer',
  CvaUser: 'CvaUser'
};

exports.AppType = exports.$Enums.AppType = {
  voice_copilot: 'voice_copilot',
  voice_virtual_agent: 'voice_virtual_agent'
};

exports.kbSource = exports.$Enums.kbSource = {
  azure_blob: 'azure_blob',
  s3: 's3',
  service_now: 'service_now',
  sharepoint: 'sharepoint',
  public_service_now: 'public_service_now'
};

exports.document_status = exports.$Enums.document_status = {
  inserted: 'inserted',
  processed: 'processed'
};

exports.recommendation_type = exports.$Enums.recommendation_type = {
  merge: 'merge',
  refactor: 'refactor',
  create_new_kb: 'create_new_kb',
  outdated: 'outdated',
  missing_translation: 'missing_translation'
};

exports.feedback_type = exports.$Enums.feedback_type = {
  positive: 'positive',
  negative: 'negative'
};

exports.incident_processing_status = exports.$Enums.incident_processing_status = {
  inserted: 'inserted',
  processed: 'processed'
};

exports.module_source = exports.$Enums.module_source = {
  knowledgebase: 'knowledgebase'
};

exports.level = exports.$Enums.level = {
  easy: 'easy',
  hard: 'hard',
  medium: 'medium'
};

exports.simulation_type = exports.$Enums.simulation_type = {
  chat: 'chat',
  voice: 'voice'
};

exports.simulation_status = exports.$Enums.simulation_status = {
  started: 'started',
  completed: 'completed',
  in_progress: 'in_progress'
};

exports.label = exports.$Enums.label = {
  ai: 'ai',
  agent: 'agent'
};

exports.transcript_type = exports.$Enums.transcript_type = {
  partial: 'partial',
  final: 'final'
};

exports.activity_type = exports.$Enums.activity_type = {
  quiz: 'quiz',
  simulation: 'simulation',
  module_completion: 'module_completion',
  quiz_started: 'quiz_started',
  quiz_submitted: 'quiz_submitted'
};

exports.ServiceAction = exports.$Enums.ServiceAction = {
  PROVISION: 'PROVISION',
  TROUBLESHOOT: 'TROUBLESHOOT',
  MANAGE: 'MANAGE',
  INFORM: 'INFORM',
  REQUEST: 'REQUEST',
  UNLOCK: 'UNLOCK',
  OTHER: 'OTHER'
};

exports.InteractionOutcome = exports.$Enums.InteractionOutcome = {
  STARTED: 'STARTED',
  COMPLETED_OK: 'COMPLETED_OK',
  TICKET_CREATED: 'TICKET_CREATED',
  TICKET_UPDATED: 'TICKET_UPDATED',
  ACCOUNT_UNLOCKED: 'ACCOUNT_UNLOCKED',
  FEEDBACK_PROVIDED_POSITIVE: 'FEEDBACK_PROVIDED_POSITIVE',
  FEEDBACK_PROVIDED_NEGATIVE: 'FEEDBACK_PROVIDED_NEGATIVE',
  ERROR_BOT: 'ERROR_BOT',
  ERROR_BACKEND: 'ERROR_BACKEND',
  ERROR_SERVICE: 'ERROR_SERVICE',
  NO_ANSWER_FOUND: 'NO_ANSWER_FOUND',
  ESCALATED: 'ESCALATED',
  CLARIFICATION_NEEDED: 'CLARIFICATION_NEEDED',
  CANCELLED: 'CANCELLED'
};

exports.FeedbackRating = exports.$Enums.FeedbackRating = {
  POSITIVE: 'POSITIVE',
  NEGATIVE: 'NEGATIVE'
};

exports.SimulationDifficultyLevel = exports.$Enums.SimulationDifficultyLevel = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.SimulationActivityStatus = exports.$Enums.SimulationActivityStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED_PASS: 'COMPLETED_PASS',
  COMPLETED_FAIL_TIME: 'COMPLETED_FAIL_TIME',
  COMPLETED_FAIL_STEPS: 'COMPLETED_FAIL_STEPS',
  ABORTED: 'ABORTED'
};

exports.meeting_joiner_status = exports.$Enums.meeting_joiner_status = {
  not_joined: 'not_joined',
  ongoing: 'ongoing',
  completed: 'completed'
};

exports.Prisma.ModelName = {
  organizations: 'organizations',
  configurations: 'configurations',
  integrations: 'integrations',
  permissions: 'permissions',
  teams: 'teams',
  users: 'users',
  phone_number: 'phone_number',
  agent_assist: 'agent_assist',
  voice_virtual_agent_call_status: 'voice_virtual_agent_call_status',
  voice_virtual_agent_calls: 'voice_virtual_agent_calls',
  voice_virtual_agents: 'voice_virtual_agents',
  intake: 'intake',
  postcall_analysis: 'postcall_analysis',
  chats: 'chats',
  meetings: 'meetings',
  realtime_transcripts: 'realtime_transcripts',
  suggestions: 'suggestions',
  kb_collections: 'kb_collections',
  kb_collection_documents: 'kb_collection_documents',
  user_profiles: 'user_profiles',
  p1_meetings: 'p1_meetings',
  noc_rules: 'noc_rules',
  reaction: 'reaction',
  binary_reaction: 'binary_reaction',
  noc_agent_assist: 'noc_agent_assist',
  ai_logs: 'ai_logs',
  dashboard_data: 'dashboard_data',
  issues: 'issues',
  logins: 'logins',
  nudging: 'nudging',
  knowledge_transition_meetings: 'knowledge_transition_meetings',
  knowledgebase_collection: 'knowledgebase_collection',
  knowledgebase_document_assist: 'knowledgebase_document_assist',
  knowledgebase_document_assist_versions: 'knowledgebase_document_assist_versions',
  knowledgebase_similarity: 'knowledgebase_similarity',
  knowledgebase_translation: 'knowledgebase_translation',
  recommendations: 'recommendations',
  incidents: 'incidents',
  modules: 'modules',
  modules_knowledgebase_documents: 'modules_knowledgebase_documents',
  quizes: 'quizes',
  questions: 'questions',
  users_quizes: 'users_quizes',
  simulations: 'simulations',
  chat_simulations: 'chat_simulations',
  voice_simulations: 'voice_simulations',
  cva_dashboard: 'cva_dashboard',
  cva_conversations: 'cva_conversations',
  cva_turn_context: 'cva_turn_context',
  postcall_topics_for_meeting: 'postcall_topics_for_meeting',
  postcall_kb_entry_version: 'postcall_kb_entry_version',
  ticket_upload_history: 'ticket_upload_history',
  train_assist_ingest: 'train_assist_ingest',
  train_assist_topics: 'train_assist_topics',
  train_assist_activity: 'train_assist_activity',
  train_assist_topic_quiz: 'train_assist_topic_quiz',
  ad_appliance_events: 'ad_appliance_events',
  ad_appliance_tasks: 'ad_appliance_tasks',
  chat_virtual_agents: 'chat_virtual_agents',
  cva_user_preferences: 'cva_user_preferences',
  servicenow_records: 'servicenow_records',
  Interaction: 'Interaction',
  UserFeedback: 'UserFeedback',
  AIFeedback: 'AIFeedback',
  SimulationTheme: 'SimulationTheme',
  SimulationActivity: 'SimulationActivity',
  meeting_joiner: 'meeting_joiner',
  tags: 'tags',
  knowledgebase_collection_tags: 'knowledgebase_collection_tags'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
